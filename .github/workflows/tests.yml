name: tests

on: [ push ]

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.x' ]
    steps:
      - name: clone repository
        uses: actions/checkout@v2
      - name: install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: load cached Python installation
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: lint-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml', 'setup.*') }}
      - name: restore built PROJ
        uses: actions/cache@v2
        id: cache-proj
        with:
          path: ~/.local/proj
          key: ${{ runner.os }}-proj-8.1.1-0
      - name: build PROJ
        shell: bash
        if: steps.cache-proj.outputs.cache-hit != 'true'
        run: |
          mkdir proj-build
          curl https://download.osgeo.org/proj/proj-8.1.1.tar.gz | tar xzf - --strip-components=1 -C proj-build
          pushd proj-build
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/.local/proj -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_IPO=ON -DENABLE_CURL=OFF -DBUILD_CCT:BOOL=OFF -DBUILD_CS2CS:BOOL=OFF -DBUILD_GEOD:BOOL=OFF \
            -DBUILD_GIE:BOOL=OFF -DBUILD_PROJINFO:BOOL=OFF -DBUILD_PROJSYNC:BOOL=OFF -DBUILD_TESTING:BOOL=OFF
          cmake --build . -j6
          cmake --install .
          popd
      - name: Update environment
        shell: bash
        run: |
          echo "CPATH=$CPATH:$HOME/${{ inputs.install-path }}/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$LIBRARY_PATH:$HOME/${{ inputs.install-path }}/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/${{ inputs.install-path }}/lib" >> $GITHUB_ENV
          echo "$HOME/${{ inputs.install-path }}/bin" >> $GITHUB_PATH
      - name: install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libproj-dev proj-data proj-bin  
          sudo apt-get install libgeos-dev
      - name: install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install ".[development]"
      - name: lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  test:
    needs: lint
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.7', '3.x' ]
    steps:
      - name: clone repository
        uses: actions/checkout@v2
      - name: install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: load cached Python installation
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml', 'setup.*') }}
      - name: restore built PROJ
        uses: actions/cache@v2
        id: cache-proj
        with:
          path: ~/.local/proj
          key: ${{ runner.os }}-proj-8.1.1-0
      - name: build PROJ
        shell: bash
        if: steps.cache-proj.outputs.cache-hit != 'true'
        run: |
          mkdir proj-build
          curl https://download.osgeo.org/proj/proj-8.1.1.tar.gz | tar xzf - --strip-components=1 -C proj-build
          pushd proj-build
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/.local/proj -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_IPO=ON -DENABLE_CURL=OFF -DBUILD_CCT:BOOL=OFF -DBUILD_CS2CS:BOOL=OFF -DBUILD_GEOD:BOOL=OFF \
            -DBUILD_GIE:BOOL=OFF -DBUILD_PROJINFO:BOOL=OFF -DBUILD_PROJSYNC:BOOL=OFF -DBUILD_TESTING:BOOL=OFF
          cmake --build . -j6
          cmake --install .
          popd
      - name: install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install cython 
          pip install ".[testing]"
      - name: run tests
        if: matrix.python-version != '3.x' || matrix.os != 'ubuntu-latest'
        run: pytest --numprocesses auto
      - name: run tests with coverage
        if: matrix.python-version == '3.x' && matrix.os == 'ubuntu-latest'
        run: pytest --numprocesses auto --cov . --cov-report xml:coverage.xml
      - name: upload coverage to Codecov
        if: matrix.python-version == '3.x' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
