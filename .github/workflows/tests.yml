name: tests

on:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - '.github/workflows/tests.yml'
      - 'pyproject.toml'
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: clone repository
        uses: actions/checkout@v4
      - name: install Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: load cached Python installation
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}
          key: lint-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - name: install linters
        run: pip install flake8 oitnb
      - name: lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: lint with oitnb
        run: oitnb . --check
  test:
    needs: lint
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.9', '3.10', '3.11' ]
    steps:
      - name: clone repository
        uses: actions/checkout@v4
      - name: install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: install linux dependencies
        run: |
          sudo apt update
          sudo apt install libhdf5-dev
          sudo apt install libnetcdf-dev
        if: runner.os == 'Linux'
      - name: install macos dependencies
        run: |
          brew install hdf5
          brew install netcdf
        if: runner.os == 'macOS'
      - name: load cached Python installation
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - name: install dependencies
        run: pip install ".[testing]"
      - name: rebuild netcdf from source
        run: python -m pip install --upgrade --force-reinstall --no-deps --no-cache-dir netcdf4 --no-binary netcdf4
        if: runner.os == 'Linux'
      - name: run tests
        run: pytest --numprocesses auto
  test_with_coverage:
    needs: [ lint, test ]
    name: test with coverage
    runs-on: ubuntu-latest
    steps:
      - name: clone repository
        uses: actions/checkout@v4
      - name: install Python
        uses: actions/setup-python@v5
        # due to coupledmodeldriver dependency python 3.10 cannot be supported
        with:
          python-version: 3.9
      - name: install linux dependencies
        run: |
          sudo apt update
          sudo apt install libhdf5-dev
          sudo apt install libnetcdf-dev
        if: runner.os == 'Linux'
      - name: install macos dependencies
        run: |
          brew install hdf5
          brew install netcdf
        if: runner.os == 'macOS'
      - name: load cached Python installation
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - name: install dependencies
        run: pip install ".[testing]"
      - name: rebuild netcdf from source
        run: python -m pip install --upgrade --force-reinstall --no-deps --no-cache-dir netcdf4 --no-binary netcdf4
        if: runner.os == 'Linux'
      - name: run tests with coverage
        run: pytest --numprocesses auto --cov . --cov-report xml:coverage.xml
      - name: show coverage report
        run: coverage report
      - name: upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
